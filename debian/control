Source: pyepics
Maintainer: Daron Chabot <chabot@frib.msu.edu>
Section: python
Priority: optional
Build-Depends: debhelper (>= 7), dh-python,
               python-setuptools (>= 0.6b3), python-all (>= 2.6.6-3), 
               python3-all, python3-setuptools
X-Python-Version: >= 2.7
X-Python3-Version: >= 3.4
Standards-Version: 3.9.8
Vcs-Git: https://github.com/pyepics/pyepics.git
Vcs-Browser: https://github.com/pyepics/pyepics


Package: python-pyepics
Architecture: all
Depends: ${misc:Depends}, ${python:Depends},
         python-setuptools, python-numpy, epics-dev
Description: Epics Channel Access for Python 2
 Python Interface to the Epics Channel Access protocol
 of the Epics control system.   PyEpics provides 3 layers of access to
 Channel Access (CA):
   1. a light wrapping of the CA C library calls, using ctypes. This
      provides a procedural CA library in which the user is expected
      to manage Channel IDs. It is mostly provided as a foundation
      upon which higher-level access is built.
   2. PV() (Process Variable) objects, which represent the basic object
      in CA, allowing one to keep a persistent connection to a remote
      Process Variable.
   3. A simple set of functions caget(), caput() and so on to mimic
      the CA command-line tools and give the simplest access to CA.
 .
 In addition, the library includes convenience classes to define
 Devices -- collections of PVs that might represent an Epics Record
 or physical device (say, a camera, amplifier, or power supply), and
 to help write GUIs for CA.

Package: python3-pyepics
Architecture: all
Depends: ${misc:Depends}, ${python3:Depends},
         python3-setuptools, python3-numpy, epics-dev
Description: Epics Channel Access for Python 3
 Python Interface to the Epics Channel Access protocol
 of the Epics control system.   PyEpics provides 3 layers of access to
 Channel Access (CA):
   1. a light wrapping of the CA C library calls, using ctypes. This
      provides a procedural CA library in which the user is expected
      to manage Channel IDs. It is mostly provided as a foundation
      upon which higher-level access is built.
   2. PV() (Process Variable) objects, which represent the basic object
      in CA, allowing one to keep a persistent connection to a remote
      Process Variable.
   3. A simple set of functions caget(), caput() and so on to mimic
      the CA command-line tools and give the simplest access to CA.
 .
 In addition, the library includes convenience classes to define
 Devices -- collections of PVs that might represent an Epics Record
 or physical device (say, a camera, amplifier, or power supply), and
 to help write GUIs for CA.
